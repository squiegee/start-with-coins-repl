;COIN STUFF
;; Enable the table gas model
(env-gasmodel "table")
(env-gaslimit 30000)

(begin-tx)
(env-gas 0) (env-gaslog)
(load "fungible-v2.pact")
(env-gaslog)
(expect
  "Gas cost of loading fungible contract"
  840 (env-gas))

(env-gas 0) (env-gaslog)
(load "coin.pact")
(env-gaslog)
(expect
  "Gas cost of loading coin contract"
  3301 (env-gas))

(create-table coin.coin-table)
(create-table coin.allocation-table)

(commit-tx)

(verify 'coin)

;; Account creation and account details unit tests

(begin-tx)
(env-data { "emily" : ["keys1"], "doug": ["keys2"], "gallina-bank": ["keys3"] })
(env-keys ["keys1", "keys2", "keys3", "keys4"])
(define-keyset 'emily (read-keyset "emily"))
(define-keyset 'doug (read-keyset "doug"))
(define-keyset 'gallina-bank (read-keyset "gallina-bank"))

(env-gas 0) (env-gaslog)
(use coin)
(env-gaslog)
(expect
  "Gas cost of using the coin contract"
  2 (env-gas))

;; create accounts should succeed and initialize with correct amounts and guards
(env-gas 0) (env-gaslog)
(create-account 'emily (read-keyset 'emily))
(create-account 'doug (read-keyset 'doug))
(create-account 'gallina-bank (read-keyset 'gallina-bank))
(env-gaslog)
(expect
  "Gas cost of coin contract account creation"
  568 (env-gas))

; check account balances for newly created accounts
(env-gas 0) (env-gaslog)
(expect
  "initial balance at 0.0"
  0.0
  (get-balance 'emily))
(env-gaslog)
(expect
  "Gas cost of querying an account's balance"
  16 (env-gas))

(commit-tx)

;; credits + debits should succeed. Both should reflect the correct balance

(begin-tx)

(use coin)

(env-gas 0) (env-gaslog)
(test-capability (DEBIT 'emily))
(env-gaslog)
(expect
  "Gas cost of testing the DEBIT capability"
  26 (env-gas))

; credit tests
(test-capability (CREDIT "emily"))
(credit 'emily (read-keyset 'emily) 100.0)

(expect
  "account balance reflects credit"
  100.0
  (get-balance 'emily))

(test-capability (CREDIT "doug"))
(credit 'doug (read-keyset 'doug) 50.0)

(expect
  "account balance reflects credit"
  50.0
  (get-balance 'doug))

(commit-tx)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Gallinas.io begin testing
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;(begin-tx)

;(define-namespace 'test (sig-keyset) (sig-keyset))
;(env-data { 'ns: 'test })
;(load "poly-fungible-v1.pact")
;(load "gallinas-tester.pact")

;(commit-tx)

;Create account test
;(begin-tx)
;(create-table test.collect-gallinas.supplies-table)
;(create-table test.collect-gallinas.gledger)
;(create-table test.collect-gallinas.uri-table)
;(create-table test.collect-gallinas.gallinas-table)
;(create-table test.collect-gallinas.total-gallinas-table)
;(create-table test.collect-gallinas.marketplace-table)
;(create-table test.collect-gallinas.gmarketplace)
;(create-table test.collect-gallinas.gift-release-table)
;(create-table test.collect-gallinas.gift-voucher-table)
;(env-data { "emily" : ["keys1"], "doug": ["keys2"], "gallina-bank": ["keys3"], "prev-block-hash": "lPqiP54vy_E3rAkvgQVme2FreVXpVhOV3dIJYENZ2Zk" })
;(env-keys ["keys1", "keys2", "keys3", "keys4"])
;(define-keyset 'emily (read-keyset "emily"))
;(define-keyset 'doug (read-keyset "emily"))
;(define-keyset 'gallina-bank (read-keyset "gallina-bank"))
;(test.collect-gallinas.create-account "TestMintBurn" "emily" (read-keyset "emily"))
;(test.collect-gallinas.create-account "TestMintBurn" "imnotreal" (read-keyset "doug"))
;(test.collect-gallinas.get-ids)
;(test.collect-gallinas.get-balance "TestMintBurn" "emily")
;(commit-tx)

;(verify "test.collect-gallinas")
